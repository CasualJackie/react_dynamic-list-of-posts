{"version":3,"sources":["api/api.js","api/posts.js","components/Post.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/InputNameForm.jsx","components/InputEmailForm.jsx","components/InputCommentForm.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostComment.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","POSTS_URL","COMMENTS_URL","getUserPosts","a","fetch","response","json","posts","data","getPostDetails","postId","postDetails","Post","memo","post","selectedPostId","isPostVisible","showPost","className","key","id","userId","title","type","onClick","propTypes","PropTypes","number","isRequired","bool","func","shape","string","PostsList","selectedUserId","useState","visiblePosts","setVisiblePosts","useEffect","fetchData","filter","map","getPostComments","comments","comment","addComment","method","body","JSON","stringify","deleteComment","commentId","InputNameForm","handleName","name","onChange","value","placeholder","InputEmailForm","handleEmail","email","InputCommentForm","handleComment","NewCommentForm","loadData","validation","setValidation","setName","setEmail","setComment","useCallback","event","target","submitComment","preventDefault","PostComment","handleDelete","PostDetails","setDetails","postComments","setPostComments","hideStatus","setHideStatus","Promise","all","details","handleHide","length","App","setSelectedUserId","setSelectedPostId","setIsPostVisible","handleSelect","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c4adede.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport const POSTS_URL = `${BASE_URL}posts/`;\n\nexport const COMMENTS_URL = `${BASE_URL}comments/`;\n","import { POSTS_URL } from './api';\n\nexport const getUserPosts = async() => {\n  const response = await fetch(POSTS_URL);\n  const posts = await response.json();\n\n  return posts.data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(POSTS_URL + postId);\n  const postDetails = await response.json();\n\n  return postDetails.data;\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Post = memo(({\n  post,\n  selectedPostId,\n  isPostVisible,\n  showPost,\n}) => (\n  <li\n    className=\"PostsList__item\"\n    key={post.id}\n  >\n    <div>\n      <b>\n        {`[User #${post.userId}]: `}\n      </b>\n      {post.title}\n    </div>\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={() => showPost(post)}\n    >\n      {selectedPostId === post.id && isPostVisible ? 'Close' : 'Open'}\n    </button>\n  </li>\n));\n\nPost.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  isPostVisible: PropTypes.bool.isRequired,\n  showPost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n}.isRequired;\n","import React, { useEffect, useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../Post';\n\nexport const PostsList = memo(({\n  selectedUserId,\n  selectedPostId,\n  isPostVisible,\n  showPost,\n}) => {\n  const [visiblePosts, setVisiblePosts] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await getUserPosts();\n\n      setVisiblePosts(response);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await getUserPosts();\n\n      if (selectedUserId === 0) {\n        setVisiblePosts(response);\n\n        return;\n      }\n\n      const posts = response.filter(({ userId }) => (\n        userId === selectedUserId\n      ));\n\n      setVisiblePosts(posts);\n    }\n\n    fetchData();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {visiblePosts.map(post => (\n          <Post\n            key={post.id}\n            post={post}\n            selectedPostId={selectedPostId}\n            isPostVisible={isPostVisible}\n            showPost={showPost}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nPostsList.propTypes = {\n  showPost: PropTypes.func.isRequired,\n  isPostVisible: PropTypes.bool.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  userSelectId: PropTypes.number.isRequired,\n}.isRequired;\n","import { COMMENTS_URL } from './api';\n\nexport const getPostComments = async(postId) => {\n  const response = await fetch(COMMENTS_URL);\n  const comments = await response.json();\n\n  return comments.data.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async(comment) => {\n  await fetch(COMMENTS_URL, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n  });\n};\n\nexport const deleteComment = async(commentId) => {\n  await fetch(`${COMMENTS_URL}${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const InputNameForm = memo(({ handleName, name }) => (\n  <div className=\"form-field\">\n    <input\n      onChange={handleName}\n      value={name}\n      type=\"text\"\n      name=\"name\"\n      placeholder=\"Your name\"\n      className=\"NewCommentForm__input\"\n    />\n  </div>\n));\n\nInputNameForm.propTypes = {\n  handleName: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n}.isRequired;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const InputEmailForm = memo(({ handleEmail, email }) => (\n  <div className=\"form-field\">\n    <input\n      onChange={handleEmail}\n      value={email}\n      type=\"text\"\n      name=\"email\"\n      placeholder=\"Your email\"\n      className=\"NewCommentForm__input\"\n    />\n  </div>\n));\n\nInputEmailForm.propTypes = {\n  handleEmail: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n}.isRequired;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const InputCommentForm = memo(({ handleComment, comment }) => (\n  <div className=\"form-field\">\n    <textarea\n      onChange={handleComment}\n      value={comment}\n      name=\"body\"\n      placeholder=\"Type comment here\"\n      className=\"NewCommentForm__input\"\n    />\n  </div>\n));\n\nInputCommentForm.propTypes = {\n  handleComment: PropTypes.func.isRequired,\n  comment: PropTypes.string.isRequired,\n}.isRequired;\n","import React, { useState, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\nimport { InputNameForm } from '../InputNameForm';\nimport { InputEmailForm } from '../InputEmailForm';\nimport { InputCommentForm } from '../InputCommentForm';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = memo(({\n  selectedPostId,\n  loadData,\n  validation,\n  setValidation,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const handleName = useCallback((event) => {\n    setName(event.target.value);\n    setValidation(false);\n  }, []);\n\n  const handleEmail = useCallback((event) => {\n    setEmail(event.target.value);\n    setValidation(false);\n  }, []);\n\n  const handleComment = useCallback((event) => {\n    setComment(event.target.value);\n    setValidation(false);\n  }, []);\n\n  const submitComment = useCallback(async(event) => {\n    event.preventDefault();\n\n    if (name === '' || email === '' || comment === '') {\n      setValidation(true);\n\n      return;\n    }\n\n    await addComment({\n      name,\n      email,\n      body: comment,\n      postId: selectedPostId,\n    });\n\n    setName('');\n    setEmail('');\n    setComment('');\n\n    loadData();\n  }, [name, email, comment, selectedPostId]);\n\n  return (\n    <form className=\"NewCommentForm\">\n      <InputNameForm handleName={handleName} name={name} />\n      <InputEmailForm handleEmail={handleEmail} email={email} />\n      <InputCommentForm handleComment={handleComment} comment={comment} />\n\n      {validation && (\n        <p className=\"NewCommentForm__error\">\n          All fields must be filled\n        </p>\n      )}\n\n      <button\n        onClick={submitComment}\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n\nNewCommentForm.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  validation: PropTypes.bool.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  loadData: PropTypes.func.isRequired,\n}.isRequired;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PostComment = memo(({ comment, handleDelete }) => (\n  <li className=\"PostDetails__list-item\">\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => handleDelete(comment.id)}\n    >\n      X\n    </button>\n    <p>{comment.body}</p>\n  </li>\n));\n\nPostComment.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n}.isRequired;\n","import React, { useEffect, useState, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { PostComment } from '../PostComment';\n\nexport const PostDetails = memo(({ selectedPostId }) => {\n  const [postDetails, setDetails] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [hideStatus, setHideStatus] = useState(true);\n  const [validation, setValidation] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, [selectedPostId]);\n\n  const loadData = async() => {\n    const [details, comments] = await Promise.all(\n      [getPostDetails(selectedPostId), getPostComments(selectedPostId)],\n    );\n\n    setValidation(false);\n    setDetails(details);\n    setPostComments(comments);\n  };\n\n  const handleHide = useCallback(() => {\n    setHideStatus(!hideStatus);\n  }, [hideStatus]);\n\n  const handleDelete = useCallback(async(commentId) => {\n    await deleteComment(commentId);\n\n    loadData();\n  }, []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleHide}\n        >\n          {\n            hideStatus\n              ? `Hide ${postComments.length} comments`\n              : `Show ${postComments.length} comments`\n          }\n\n        </button>\n\n        {hideStatus && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <PostComment\n                key={comment.id}\n                comment={comment}\n                handleDelete={handleDelete}\n              />\n            ))}\n\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            loadData={loadData}\n            validation={validation}\n            setValidation={setValidation}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n}.isRequired;\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [isPostVisible, setIsPostVisible] = useState(false);\n\n  const handleSelect = useCallback((event) => {\n    setSelectedUserId(Number(event.target.value));\n  }, []);\n\n  const showPost = useCallback((post) => {\n    if (post.id === selectedPostId) {\n      setIsPostVisible(false);\n      setSelectedPostId(null);\n\n      return;\n    }\n\n    setSelectedPostId(post.id);\n    setIsPostVisible(true);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            onChange={handleSelect}\n            value={selectedUserId}\n            className=\"App__user-selector\"\n          >\n            <option value={0}>All users</option>\n            <option value={1}>Leanne Graham</option>\n            <option value={2}>Ervin Howell</option>\n            <option value={3}>Clementine Bauch</option>\n            <option value={4}>Patricia Lebsack</option>\n            <option value={5}>Chelsey Dietrich</option>\n            <option value={6}>Mrs. Dennis Schulist</option>\n            <option value={7}>Kurtis Weissnat</option>\n            <option value={8}>Nicholas Runolfsdottir V</option>\n            <option value={9}>Glenna Reichert</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            isPostVisible={isPostVisible}\n            showPost={showPost}\n          />\n        </div>\n\n        {isPostVisible && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}